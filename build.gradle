apply plugin: "java-library"
apply plugin: "maven-publish"

ext.pluginNameUpper = "DeathChest"
ext.pluginNameLower = ext.pluginNameUpper.toLowerCase()
ext.majorVersion = 5
ext.minorVersion = 1
ext.minecraftVersion = "1.17"

sourceCompatibility = 16
targetCompatibility = 16

// Supplied by Jenkins
ext.buildNumber = System.env.BUILD_NUMBER == null ? "x"                : "$System.env.BUILD_NUMBER"
ext.mavenDirectory = System.env.MAVEN_DIR == null ? "$projectDir/repo" : "$System.env.MAVEN_DIR"
ext.jdDirectory = System.env.JAVADOCS_DIR == null ? null               : "$System.env.JAVADOCS_DIR"

group = "cat.nyaa"
archivesBaseName = "${pluginNameUpper}-mc$minecraftVersion"
version = "$majorVersion.$minorVersion.$buildNumber".toString()

repositories {
    mavenCentral()
    maven {
        name 'pigotmc-repo'
        url 'https://hub.spigotmc.org/nexus/content/repositories/snapshots/'
    }
    maven {
        name 'NyaaCat'
        url 'https://ci.nyaacat.com/maven/'
    }
}
archivesBaseName = 'DeathChest'


dependencies {
    compileOnly "org.spigotmc:spigot-api:$minecraftVersion-R0.1-SNAPSHOT"

    // other nyaa plugins
    if (gradle.hasProperty("useLocalDependencies") && gradle.useLocalDependencies) {
        compileOnly project(":NyaaCore")
    } else {
        compileOnly('cat.nyaa:nyaacore:8.0-SNAPSHOT') { transitive = false }
    }

    // other nyaa plugins
    if (gradle.hasProperty("useLocalDependencies") && gradle.useLocalDependencies) {
        compileOnly project(":NyaaCore")
        compileOnly project(":LanguageUtils")
    } else {
        compileOnly('cat.nyaa:nyaacore:8.1-SNAPSHOT') { transitive = false }
        compileOnly('com.meowj:LangUtils:2.4-SNAPSHOT') { transitive = false }
    }

    //test
    testImplementation(platform('org.junit:junit-bom:5.7.2'))
    testImplementation('org.junit.jupiter:junit-jupiter:5.7.2')

}

processResources {
    filesMatching("**/plugin.yml") {
        expand 'version': project.version
    }
}

task sourcesJar(type: Jar) {
    archiveClassifier.set('sources')
    from sourceSets.main.java.srcDirs
}

// extra compile warnings
compileJava {
    options.compilerArgs += ["-Xlint:deprecation"]
    options.encoding = 'UTF-8'
}

test {
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed"
    }
}